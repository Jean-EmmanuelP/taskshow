const mongoose = require('mongoose');
require('dotenv').config();

const connectDB = async () => {
  try {
    // Check if MONGO_URI is defined
    if (!process.env.MONGO_URI) {
      console.error('‚ùå MONGO_URI n\'est pas d√©finie dans le fichier .env');
      console.log('üìã Veuillez copier server/env.example vers server/.env et configurer votre URI MongoDB');
      process.exit(1);
    }

    // Configuration options for MongoDB connection (version moderne, sans options d√©pr√©ci√©es)
    const options = {
      serverSelectionTimeoutMS: 5000, // Timeout after 5s instead of 30s
      socketTimeoutMS: 45000, // Close sockets after 45s of inactivity
      maxPoolSize: 10
    };

    // Connect to MongoDB
    await mongoose.connect(process.env.MONGO_URI, options);
    
    console.log('‚úÖ MongoDB connect√© avec succ√®s');
    console.log(`üîó Base de donn√©es: ${mongoose.connection.name}`);
    
  } catch (err) {
    console.error('‚ùå Erreur de connexion MongoDB:', err.message);
    console.log('\nüîß Solutions possibles:');
    console.log('1. V√©rifiez votre URI MongoDB dans le fichier .env');
    console.log('2. Assurez-vous que MongoDB est accessible');
    console.log('3. V√©rifiez votre connexion internet (pour MongoDB Atlas)');
    console.log('4. Whitelist votre IP dans MongoDB Atlas');
    console.log('5. V√©rifiez que le nom d\'utilisateur et le mot de passe sont corrects');
    
    // Continue without MongoDB for development
    console.log('\n‚ö†Ô∏è  Connexion MongoDB √©chou√©e - Mode d√©veloppement sans MongoDB');
    console.log('‚úÖ Application fonctionne avec localStorage uniquement');
    console.log('üîç Erreur MongoDB:', err.message);
  }
};

module.exports = connectDB; 